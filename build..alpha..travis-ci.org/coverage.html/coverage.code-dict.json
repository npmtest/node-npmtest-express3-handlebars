{"/home/travis/build/npmtest/node-npmtest-express3-handlebars/test.js":"/* istanbul instrument in package npmtest_express3_handlebars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express3-handlebars/lib.npmtest_express3_handlebars.js":"/* istanbul instrument in package npmtest_express3_handlebars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express3_handlebars = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express3_handlebars = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express3-handlebars/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express3-handlebars && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express3_handlebars */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express3_handlebars\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express3_handlebars.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express3_handlebars.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express3_handlebars.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express3_handlebars.__dirname + '/lib.npmtest_express3_handlebars.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express3-handlebars/node_modules/express3-handlebars/index.js":"var ExpressHandlebars = require('./lib/express-handlebars');\n\nfunction exphbs(config) {\n    return exphbs.create(config).engine;\n}\n\nexphbs.create = function (config) {\n    return new ExpressHandlebars(config);\n};\n\nexphbs.ExpressHandlebars = ExpressHandlebars;\n\nmodule.exports = exphbs;\n","/home/travis/build/npmtest/node-npmtest-express3-handlebars/node_modules/express3-handlebars/lib/express-handlebars.js":"var async  = require('async'),\n    fs     = require('fs'),\n    glob   = require('glob'),\n    path   = require('path'),\n    semver = require('semver');\n\n// -- Utilites -----------------------------------------------------------------\n\nfunction extend(obj) {\n    Array.prototype.slice.call(arguments, 1).forEach(function (source) {\n        if (!source) { return; }\n\n        for (var key in source) {\n            obj[key] = source[key];\n        }\n    });\n\n    return obj;\n}\n\n// -- Constructor --------------------------------------------------------------\n\nfunction ExpressHandlebars(config) {\n    config || (config = {});\n\n    var handlebars = config.handlebars || require('handlebars');\n\n    if ('extname'     in config) { this.extname     = config.extname;     }\n    if ('layoutsDir'  in config) { this.layoutsDir  = config.layoutsDir;  }\n    if ('partialsDir' in config) { this.partialsDir = config.partialsDir; }\n    \n    if(this.extname[0] !== '.') { this.extname = '.' + this.extname; }\n    \n    this.defaultLayout = config.defaultLayout;\n    this.handlebars    = handlebars;\n    this.helpers       = config.helpers;\n\n    this.handlebarsVersion = ExpressHandlebars.getHandlebarsSemver(handlebars);\n\n    this.compiled    = {};\n    this.precompiled = {};\n\n    this.engine = this.renderView.bind(this);\n}\n\n// -- Statics ------------------------------------------------------------------\n\nExpressHandlebars._dirCache     = {};\nExpressHandlebars._fileCache    = {};\nExpressHandlebars._pendingReads = {};\n\nExpressHandlebars.getHandlebarsSemver = function (handlebars) {\n    var version = handlebars.VERSION || '';\n\n    // Makes sure the Handlebars version is a valid semver.\n    if (version && !semver.valid(version)) {\n        version = version.replace(/(\\d\\.\\d)\\.(\\D.*)/, '$1.0-$2');\n    }\n\n    return version;\n};\n\n// -- Prototype ----------------------------------------------------------------\n\nextend(ExpressHandlebars.prototype, {\n    // -- Public Properties ----------------------------------------------------\n\n    extname    : '.handlebars',\n    layoutsDir : 'views/layouts/',\n    partialsDir: 'views/partials/',\n\n    // -- Public Methods -------------------------------------------------------\n\n    loadPartials: function (options, callback) {\n        if (arguments.length < 2 && typeof options === 'function') {\n            callback = options;\n            options  = {};\n        }\n\n        options || (options = {});\n\n        function load(dirs, options, callback) {\n            Array.isArray(dirs) || (dirs = [dirs]);\n            var loadTemplates = this.loadTemplates.bind(this);\n\n            async.map(dirs, function (dir, callback) {\n                loadTemplates(dir, options, callback);\n            }, callback);\n        }\n\n        function mapPartials(dirs, callback) {\n            var getPartialName = this._getPartialName.bind(this),\n                partials;\n\n            partials = dirs.reduce(function (partials, templates) {\n                Object.keys(templates).forEach(function (filePath) {\n                    partials[getPartialName(filePath)] = templates[filePath];\n                });\n\n                return partials;\n            }, {});\n\n            callback(null, partials);\n        }\n\n        async.waterfall([\n            load.bind(this, this.partialsDir, options),\n            mapPartials.bind(this)\n        ], callback);\n    },\n\n    loadTemplate: function (filePath, options, callback) {\n        filePath = path.resolve(filePath);\n\n        if (arguments.length < 3 && typeof options === 'function') {\n            callback = options;\n            options  = {};\n        }\n\n        options || (options = {});\n\n        var precompiled = options.precompiled,\n            cache       = precompiled ? this.precompiled : this.compiled,\n            template    = options.cache && cache[filePath],\n            compile;\n\n        if (template) {\n            callback(null, template);\n            return;\n        }\n\n        compile = this.handlebars[precompiled ? 'precompile' : 'compile'];\n\n        this._loadFile(filePath, options, function (err, file) {\n            if (err) { return callback(err); }\n\n            try {\n                template = cache[filePath] = compile(file);\n                callback(null, template);\n            } catch (ex) {\n                callback(ex);\n            }\n        });\n    },\n\n    loadTemplates: function (dirPath, options, callback) {\n        if (arguments.length < 3 && typeof options === 'function') {\n            callback = options;\n            options  = {};\n        }\n\n        options || (options = {});\n\n        function load(filePath, callback) {\n            this.loadTemplate(path.join(dirPath, filePath), options, callback);\n        }\n\n        function mapTemplates(filePaths, callback) {\n            async.map(filePaths, load.bind(this), function (err, templates) {\n                if (err) { return callback(err); }\n\n                var map = filePaths.reduce(function (map, filePath, i) {\n                    map[filePath] = templates[i];\n                    return map;\n                }, {});\n\n                callback(null, map);\n            });\n        }\n\n        async.waterfall([\n            this._loadDir.bind(this, dirPath, options),\n            mapTemplates.bind(this)\n        ], callback);\n    },\n\n    render: function (filePath, options, callback) {\n        if (arguments.length < 3 && typeof options === 'function') {\n            callback = options;\n            options  = {};\n        }\n\n        options || (options = {});\n\n        var helpers = extend({},\n                    this.handlebars.helpers, this.helpers, options.helpers);\n\n        function loadTemplates(callback) {\n            async.parallel({\n                partials: this.loadPartials.bind(this, options),\n                template: this.loadTemplate.bind(this, filePath, options)\n            }, callback);\n        }\n\n        function renderTemplate(templates, callback) {\n            this._renderTemplate(templates.template, options, {\n                helpers : helpers,\n                partials: templates.partials\n            }, callback);\n        }\n\n        // Force `{precompiled: false}` option, before passing `options` along\n        // to `getPartials()` and `getTemplate()` methods.\n        if (options.precompiled) {\n            options = extend({}, options, {precompiled: false});\n        }\n\n        async.waterfall([\n            loadTemplates.bind(this),\n            renderTemplate.bind(this)\n        ], callback);\n    },\n\n    renderView: function (viewPath, options, callback) {\n        if (arguments.length < 3 && typeof options === 'function') {\n            callback = options;\n            options  = {};\n        }\n\n        options || (options = {});\n\n        var layoutPath = this._resolveLayoutPath(options);\n\n        function renderLayout(body, callback) {\n            var context = extend({}, options, {body: body});\n            this.render(layoutPath, context, callback);\n        }\n\n        // Simple render when no layout is used.\n        if (!layoutPath) {\n            this.render.apply(this, arguments);\n            return;\n        }\n\n        // Force `{precompiled: false}` option, before passing options along to\n        // `getPartials()` and `getTemplate()` methods.\n        if (options.precompiled) {\n            options = extend({}, options, {precompiled: false});\n        }\n\n        async.waterfall([\n            this.render.bind(this, viewPath, options),\n            renderLayout.bind(this)\n        ], callback);\n    },\n\n    // -- Private Methods ------------------------------------------------------\n\n    _getPartialName: function (filePath) {\n        var extRegex = new RegExp(this.extname + '$'),\n            name     = filePath.replace(extRegex, ''),\n            version  = this.handlebarsVersion;\n\n        // Fixes a Handlebars bug in versions prior to 1.0.rc.2 which caused\n        // partials with \"/\"s in their name to not be found.\n        // https://github.com/wycats/handlebars.js/pull/389\n        if (version && !semver.satisfies(version, '>=1.0.0-rc.2')) {\n            name = name.replace('/', '.');\n        }\n\n        return name;\n    },\n\n    _loadDir: function (dirPath, options, callback) {\n        dirPath = path.resolve(dirPath);\n\n        var dirCache     = ExpressHandlebars._dirCache,\n            pendingReads = ExpressHandlebars._pendingReads,\n            dir          = options.cache && dirCache[dirPath],\n            callbacks, pattern;\n\n        if (dir) {\n            callback(null, dir.concat());\n            return;\n        }\n\n        callbacks = pendingReads[dirPath];\n\n        if (callbacks) {\n            callbacks.push(callback);\n            return;\n        }\n\n        callbacks = pendingReads[dirPath] = [callback];\n        pattern   = '**/*' + this.extname;\n\n        glob(pattern, {cwd: dirPath}, function (err, dir) {\n            if (!err) {\n                dirCache[dirPath] = dir;\n            }\n\n            while (callbacks.length) {\n                callbacks.shift().call(null, err, dir && dir.concat());\n            }\n\n            delete pendingReads[dirPath];\n        });\n    },\n\n    _loadFile: function (filePath, options, callback) {\n        filePath = path.resolve(filePath);\n\n        var fileCache    = ExpressHandlebars._fileCache,\n            pendingReads = ExpressHandlebars._pendingReads,\n            file         = options.cache && fileCache[filePath],\n            callbacks;\n\n        if (file) {\n            callback(null, file);\n            return;\n        }\n\n        callbacks = pendingReads[filePath];\n\n        if (callbacks) {\n            callbacks.push(callback);\n            return;\n        }\n\n        callbacks = pendingReads[filePath] = [callback];\n\n        fs.readFile(filePath, 'utf8', function (err, file) {\n            if (!err) {\n                fileCache[filePath] = file;\n            }\n\n            while (callbacks.length) {\n                callbacks.shift().call(null, err, file);\n            }\n\n            delete pendingReads[filePath];\n        });\n    },\n\n    _renderTemplate: function (template, context, options, callback) {\n        var output;\n\n        try {\n            output = template(context, options);\n            callback(null, output);\n        } catch (ex) {\n            callback(ex);\n        }\n    },\n\n    _resolveLayoutPath: function (options) {\n        // Makes sure to interpret falsy `options.layout` values as no layout.\n        var layoutPath = 'layout' in options ? options.layout :\n                this.defaultLayout;\n\n        if (!layoutPath) {\n            return null;\n        }\n\n        if (!path.extname(layoutPath)) {\n            layoutPath += this.extname;\n        }\n\n        if (layoutPath[0] !== '/') {\n            layoutPath = path.join(this.layoutsDir, layoutPath);\n        }\n\n        return layoutPath;\n    }\n});\n\n// -- Exports ------------------------------------------------------------------\n\nmodule.exports = ExpressHandlebars;\n"}